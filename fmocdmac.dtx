% \iffalse meta-comment
%
%<*internal>
\iffalse
%</internal>
%
%<*readme>

--------:| ---------------------------------------------------------------------
fmocdmac:| FM's OCD LaTeX Macros
  Author:| Fabio Mogavero
  E-mail:| fm@fabiomogavero.com
 License:| Released under the LaTeX Project Public License v1.3c or later
     See:| http://www.latex-project.org/lppl.txt
--------:| ---------------------------------------------------------------------

This package contains almost all the latex macros I heavily use in my tcs
research activity and, in particular, in the writing of conference and journal
articles. As few of my co-authors have kindly pointed out, and probably many
have thought, they are somehow a clear expression of an underlying ocd-like
behavior... hence the name!

%</readme>
%
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else\expandafter\begingroup\fi
%</internal>
%
%<*install>
\input{docstrip.tex}
\keepsilent
\askforoverwritefalse
\preamble

--------:| ------------------------------------------------------------------
fmocdmac:| FM's OCD LaTeX Macros
  Author:| Fabio Mogavero
  E-mail:| fm@fabiomogavero.com
 License:| Released under the LaTeX Project Public License v1.3c or later
     See:| http://www.latex-project.org/lppl.txt
--------:| ------------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 2020-2023 by Fabio Mogavero <fm@fabiomogavero.com>

This work may be distributed and/or modified under the conditions of the
LaTeX Project Public License (LPPL), either version 1.3c of this license or
(at your option) any later version. The latest version of this license can be
retrieved at the address <http://www.latex-project.org/lppl.txt>.

This work is "maintained" (as per LPPL maintenance status) by Fabio Mogavero.
It consists of the file <fmocdmac.dtx> and a <Makefile>. Running "make"
generates the derived files <readme>, <fmocdmac.pdf>, and <fmocdmac.sty>.
Running "make inst" installs the files in the user's TeX tree. Running "make
install" installs the files in the local TeX tree.

\endpostamble
\usedir{tex/latex/fmocdmac}
\generate{%
  \file{\jobname.sty}{%
    \from{\jobname.dtx}{package}%
    \from{\jobname-aux.dtx}{}%
    \from{\jobname-txtmet.dtx}{}%
    \from{\jobname-mthmet.dtx}{}%
    \from{\jobname-txtgen.dtx}{}%
    \from{\jobname-mthgen.dtx}{}%
    \from{\jobname-txt.dtx}{}%
    \from{\jobname-mth.dtx}{}%
    \from{\jobname-com.dtx}{}%
    \from{\jobname-gam.dtx}{}%
    \from{\jobname-log.dtx}{}%
    \from{\jobname-aut.dtx}{}%
    \from{\jobname-frm.dtx}{}%
    \from{\jobname-fig.dtx}{}%
    \from{\jobname-tab.dtx}{}%
    \from{\jobname-alg.dtx}{}%
  }%
}
%</install>
%
%<install>\endbatchfile
%
%<*internal>
\usedir{source/latex/fmocdmac}
\generate{%
  \file{\jobname.ins}{%
    \from{\jobname.dtx}{install}%
  }%
}
\nopreamble\nopostamble
\usedir{doc/latex/fmocdmac}
\generate{%
  \file{readme.txt}{%
    \from{\jobname.dtx}{readme}%
  }%
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%
% \fi
% \iffalse
%
%<*driver>
\ProvidesFile{fmocdmac.dtx}
%</driver>
%
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\ProvidesPackage{fmocdmac}
%<*package>
  [2023/09/14 v0.22 FM's OCD LaTeX Macro]
%</package>
%
%<*driver>
\documentclass{ltxdoc}
\usepackage[a4paper, margin=25mm, left=32mm, nohead]{geometry}
\usepackage[numbered]{hypdoc}
\usepackage[final]{microtype}
\usepackage{\jobname}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{\jobname.dtx}

  \DocInput{\jobname-aux.dtx}

  \DocInput{\jobname-txtmet.dtx}
  \DocInput{\jobname-mthmet.dtx}

  \DocInput{\jobname-txtgen.dtx}
  \DocInput{\jobname-mthgen.dtx}

  \DocInput{\jobname-txt.dtx}
  \DocInput{\jobname-mth.dtx}

  \DocInput{\jobname-com.dtx}

  \DocInput{\jobname-gam.dtx}
  \DocInput{\jobname-log.dtx}
  \DocInput{\jobname-aut.dtx}

  \DocInput{\jobname-frm.dtx}
  \DocInput{\jobname-fig.dtx}
  \DocInput{\jobname-tab.dtx}
  \DocInput{\jobname-alg.dtx}
\end{document}
%</driver>
%
% \fi
%
% \GetFileInfo{\jobname.dtx}
% \DoNotIndex{\newcommand, \newenvironment}
%
% \title{\textsf{fmocdmac} --- FM's OCD \LaTeX\ Macro\thanks{This document
%   describes version \fileversion\ of the fmocdmac package, last revised
%   \filedate.}}
% \author{Fabio Mogavero \\ fm@fabiomogavero.com}
% \date{Released \filedate}
%
% \maketitle
%
% \changes{v0.0}{2020/12/31}{First public release}
%
% \changes{v0.1}{2021/01/02}{Algorithm tricks}
%
% \changes{v0.2}{2021/02/03}{Changes in `Auxiliary tricks'}
%
% \changes{v0.3}{2021/02/22}{Few problems solved}
%
% \changes{v0.4}{2021/05/10}{Refactoring, corrections, and extensions}
%
% \changes{v0.5}{2021/05/15}{Figure tricks}
%
% \changes{v0.6}{2021/07/14}{Small refinements}
%
% \changes{v0.7}{2022/02/06}{Refinements, corrections, and extensions}
%
% \changes{v0.8}{2022/08/21}{Few refinements and corrections}
%
% \changes{v0.9}{2022/10/03}{Small addition to `Algorithm tricks'}
%
% \changes{v0.10}{2022/10/12}{Small refinements}
%
% \changes{v0.11}{2023/01/16}{Few additions and corrections}
%
% \changes{v0.12}{2023/01/23}{New starred variants}
%
% \changes{v0.13}{2023/02/01}{Further starred variants}
%
% \changes{v0.14}{2023/02/05}{Few additions and corrections}
%
% \changes{v0.15}{2023/02/14}{Refactoring of dtx sources}
%
% \changes{v0.16}{2023/02/16}{Small refinements and few additions}
%
% \changes{v0.17}{2023/05/01}{Few additions}
%
% \changes{v0.18}{2023/05/24}{Few new starred variants}
%
% \changes{v0.19}{2023/06/09}{Additional starred variants}
%
% \changes{v0.20}{2023/07/29}{New binary operators}
%
% \changes{v0.21}{2023/08/27}{Refactoring of function macros}
%
% \changes{v0.22}{2023/09/14}{Few additions}
%
% \begin{abstract}
% This package contains almost all the latex macros I heavily use in my tcs
% research activity and, in particular, in the writing of conference and journal
% articles. As few of my co-authors have kindly pointed out, and probably many
% have thought, they are somehow a clear expression of an underlying ocd-like
% behavior... hence the name!
% \end{abstract}
%
% \StopEventually{\newpage\PrintChanges\PrintIndex}
%
% \section{Implementation \& Usage}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% \subsection*{Required external packages:}
%
%    \begin{macrocode}

\RequirePackage{etoolbox}

\RequirePackage{xargs}
\RequirePackage{xspace}
\RequirePackage{stringstrings}

%    \end{macrocode}
%
% \subsection*{Package options:}
%
%    \begin{macrocode}

%% Auxiliary packages
\newif\ifaux@ \aux@false
\DeclareOption{aux}{\aux@true}
\DeclareOption{noaux}{\aux@false}

%% AMS defaults
\newif\ifamsdef@ \amsdef@true
\DeclareOption{noamsdef}{\amsdef@false}

%% AMS theorem tools
\newif\ifamsthm@ \amsthm@true
\DeclareOption{noamsthm}{\amsthm@false}

%% Extended Theorem tools
\newif\ifthmtls@ \thmtls@true
\DeclareOption{nothmtls}{\thmtls@false}

%% Enumeration tools
\newif\ifenmtls@ \enmtls@true
\DeclareOption{noenmtls}{\enmtls@false}

%% Hyper reference
\newif\ifhypref@ \hypref@true
\DeclareOption{nohypref}{\hypref@false}

%% Font tools
\newif\iffnttls@ \fnttls@true
\DeclareOption{nofnttls}{\fnttls@false}

%% Camera-ready version
\newif\ifcrv@ \crv@false
\DeclareOption{crv}{\crv@true}

%% Change bars
\newif\ifchgbar@ \chgbar@false
\DeclareOption{chgbar}{\chgbar@true}

%% Line numbers
\newif\iflinnum@ \linnum@false
\DeclareOption{linnum}{\linnum@true}


%% Text macro generation
\newif\iftxtgen@ \txtgen@false
\DeclareOption{txtgen}{\txtgen@true}
\DeclareOption{notxtgen}
  {\txtgen@false\txt@false\com@false\gam@false\log@false\aut@false}

%% Math macro generation
\newif\ifmthgen@ \mthgen@false
\DeclareOption{mthgen}{\mthgen@true}
\DeclareOption{nomthgen}
  {\mthgen@false\mth@false\gam@false\log@false\aut@false}


%% Elementary macros for text
\newif\iftxt@ \txt@false
\DeclareOption{txt}{\txt@true\txtgen@true}
\DeclareOption{notxt}{\txt@false}

%% Elementary macros for math
\newif\ifmth@ \mth@false
\DeclareOption{mth}{\mth@true\mthgen@true}
\DeclareOption{nomth}{\mth@false}


%% Macros for computational-complexity classes
\newif\ifcom@ \com@false
\DeclareOption{com}{\com@true\txtgen@true}
\DeclareOption{nocom}{\com@false}


%% Macros for games
\newif\ifgam@ \gam@false
\DeclareOption{gam}{\gam@true\txtgen@true\mthgen@true}
\DeclareOption{nogam}{\gam@false}

%% Macros for logics
\newif\iflog@ \log@false
\DeclareOption{log}{\log@true\txtgen@true\mthgen@true}
\DeclareOption{nolog}{\log@false}

%% Macros for automata
\newif\ifaut@ \aut@false
\DeclareOption{aut}{\aut@true\txtgen@true\mthgen@true}
\DeclareOption{noaut}{\aut@false}


%% Format-related tricks
\newif\iffrm@ \frm@false
\DeclareOption{frm}{\frm@true}
\DeclareOption{nofrm}{\frm@false}


%% Figure-related tricks
\newif\iffig@ \fig@false
\DeclareOption{fig}{\fig@true}
\DeclareOption{nofig}{\fig@false}

%% Wrapfig package
\newif\ifwrpfig@ \wrpfig@true
\DeclareOption{nowrpfig}{\wrpfig@false}


%% Table-related tricks
\newif\iftab@ \tab@false
\DeclareOption{tab}{\tab@true}
\DeclareOption{notab}{\tab@false}


%% Algorithm-related tricks
\newif\ifalg@ \alg@false
\DeclareOption{alg}{\alg@true}
\DeclareOption{noalg}{\alg@false}

%    \end{macrocode}
%
% \subsection*{Option-processing code:}
%
%    \begin{macrocode}

\DeclareOption*{\PackageWarning{fmocdmac}{Unknown~‘\CurrentOption’}}%

\ExecuteOptions{aux,txtgen,mthgen,txt,mth,com,gam,log,aut}%

\ProcessOptions\relax%

\ifcsdef{if@twocolumn}{}{\newif\if@twocolumn}

%    \end{macrocode}
%
% \subsection*{Package main body:}
%
%    \begin{macrocode}

%%****************************************************************************%%
%%** Auxiliary Alphabet Letters **********************************************%%
%%****************************************************************************%%
%    \end{macrocode}

% \begin{macro}{\omicron}
%   \textbf{Auxiliary Greek lowercase letter:}
%   ... to do!
%    \begin{macrocode}
\csdef{omicron}{o}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\Alpha, ...}
%   \textbf{Auxiliary Greek uppercase letters:}
%   ... to do!
%    \begin{macrocode}
\csdef{Alpha}{A} \csdef{Beta}{B} \csdef{Epsilon}{E} \csdef{varEpsilon}{E}
\csdef{Zeta}{Z} \csdef{Eta}{H} \csdef{Iota}{I} \csdef{Kappa}{K}
\csdef{varKappa}{K} \csdef{Mu}{M} \csdef{Nu}{N} \csdef{Omicron}{O}
\csdef{Rho}{P} \csdef{varRho}{P} \csdef{Tau}{T} \csdef{Chi}{X}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
%%****************************************************************************%%
%    \end{macrocode}

%    \begin{macrocode}
%%****************************************************************************%%
%%** Tools *******************************************************************%%
%%****************************************************************************%%
%    \end{macrocode}

% \begin{macro}{\empchk}
%   \textbf{Emptiness check:} \cmd{\empchk}\marg{A}\marg{B} evaluates to the
%   empty string, if Argument~\meta{A} is empty, and to Argument~\meta{B},
%   otherwise.
%   \small
%   \begin{itemize}
%     \item
%       \verb=\empchk{}{B}= = ``\empchk{}{B}''
%     \item
%       \verb=\empchk{A}{B}= = ``\empchk{A}{B}''
%   \end{itemize}
%    \begin{macrocode}
\newcommand{\empchk}[2]
  {\if&#1&\else#2\fi}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\defval}
%   \textbf{Default value:} \cmd{\defval}\marg{A}\marg{B} evaluates to
%   Argument~\meta{B}, if Argument~\meta{A} is empty, and to Argument~\meta{A}
%   itself, otherwise.
%   \small
%   \begin{itemize}
%     \item
%       \verb=\defval{}{B}= = ``\defval{}{B}''
%     \item
%       \verb=\defval{A}{B}= = ``\defval{A}{B}''
%   \end{itemize}
%    \begin{macrocode}
\newcommand{\defval}[2]
  {\if&#1&#2\else#1\fi}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
%%****************************************************************************%%
%    \end{macrocode}

% \begin{macro}{\arglef}
%   \textbf{Left extension:} \cmd{\arglef}\marg{A}\marg{B} evaluates to the
%   concatenation~\meta{AB} of the two arguments, if Argument~\meta{B} is
%   non-empty, and to the empty string, otherwise.
%   \small
%   \begin{itemize}
%     \item
%       \verb=\arglef{A}{}= = ``\arglef{A}{}''
%     \item
%       \verb=\arglef{A}{B}= = ``\arglef{A}{B}''
%   \end{itemize}
%    \begin{macrocode}
\newcommand{\arglef}[2]
  {\empchk{#2}{#1#2}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\argrig}
%   \textbf{Right extension:} \cmd{\argrig}\marg{A}\marg{B} evaluates to the
%   concatenation~\meta{AB} of the two arguments, if Argument~\meta{A} is
%   non-empty, and to the empty string, otherwise.
%   \small
%   \begin{itemize}
%     \item
%       \verb=\argrig{}{B}= = ``\argrig{}{B}''
%     \item
%       \verb=\argrig{A}{B}= = ``\argrig{A}{B}''
%   \end{itemize}
%    \begin{macrocode}
\newcommand{\argrig}[2]
  {\empchk{#1}{#1#2}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\argmid}
%   \textbf{Middle extension:} \cmd{\argmid}\marg{A}\marg{B}\marg{C} evaluates
%   to the concatenation~\meta{ABC} of the three arguments, if Argument~\meta{B}
%   is non-empty, and to the empty string, otherwise.
%   \small
%   \begin{itemize}
%     \item
%       \verb=\argmid{A}{}{C}= = ``\argmid{A}{}{C}''
%     \item
%       \verb=\argmid{A}{B}{C}= = ``\argmid{A}{B}{C}''
%   \end{itemize}
%    \begin{macrocode}
\newcommand{\argmid}[3]
  {\empchk{#2}{#1#2#3}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\argsep}
%   \textbf{Separators:} \cmd{\argsep}\marg{A}\marg{B}\marg{C} evaluates to
%   Argument~\meta{C}, if Argument~\meta{A} is empty, to Argument~\meta{A}, if
%   Argument~\meta{C} is empty, and to the concatenation~\meta{ABC}, otherwise.
%   \small
%   \begin{itemize}
%     \item
%       \verb=\argsep{}{B}{C}= = ``\argsep{}{B}{C}''
%     \item
%       \verb=\argsep{A}{B}{}= = ``\argsep{A}{B}{}''
%     \item
%       \verb=\argsep{A}{}{C}= = ``\argsep{A}{}{C}''
%     \item
%       \verb=\argsep{A}{B}{C}= = ``\argsep{A}{B}{C}''
%   \end{itemize}
%    \begin{macrocode}
\newcommand{\argsep}[3]
  {\if&#1&#3\else#1\arglef{#2}{#3}\fi}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
%%****************************************************************************%%
%    \end{macrocode}

% \begin{macro}{\varcmd}
%   \textbf{Variadic commands:}
%   \cmd{\varcmd}\marg{A}\marg{B}\marg{C}\marg{D}\marg{E}\marg{F}
%   ... to do!
%    \begin{macrocode}
\newcommand{\varcmd}[6]
  {\expandafter\newcommand\csname gobble#1arg\endcsname[2]
    {\csname check#1arg\endcsname{\argsep{##1}{#4}{\empchk{##2}{{##2}}}}}%
  \expandafter\newcommand\csname check#1arg\endcsname[1]
    {\csname @ifnextchar\endcsname%
      \bgroup{\csname gobble#1arg\endcsname{##1}}{#2{##1#5}#6}}%
  \expandafter\newcommand\csname#1\endcsname[1]
    {\csname check#1arg\endcsname{#3##1}}}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
%%****************************************************************************%%
%    \end{macrocode}

% \begin{macro}{\seqoftag}
%   \textbf{Sequence of tags:}
%   \cmd{\seqoftag}\marg{A}\marg{B}\marg{C}
%   ... to do!
%    \begin{macrocode}
\newcommand{\seqoftag}[3]
  {\@for\itr:={#1}\do%
    {\expandafter\csedef{\itr#2}%
      {\noexpand\csname #3\endcsname{\itr}}}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\seqofcmd}
%   \textbf{Sequence of commands:}
%   \cmd{\seqofcmd}\marg{A}\marg{B}\marg{C}
%   ... to do!
%    \begin{macrocode}
\newcommand{\seqofcmd}[3]
  {\@for\itr:={#1}\do%
    {\expandafter\csedef{\itr#2}%
      {\noexpand\csname #3\endcsname{\csname \itr\endcsname}}}}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
%%****************************************************************************%%
%    \end{macrocode}

% \begin{macro}{\seqoflatlow}
%   \textbf{Sequence of Latin lowercase letters:}
%   \cmd{\seqoflatlow}\marg{A}\marg{B}
%   ... to do!
%    \begin{macrocode}
\newcommand{\seqoflatlow}
  {\seqoftag{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\seqoflatupp}
%   \textbf{Sequence of Latin uppercase letters:}
%   \cmd{\seqoflatupp}\marg{A}\marg{B}
%   ... to do!
%    \begin{macrocode}
\newcommand{\seqoflatupp}
  {\seqoftag{A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\seqoflatlet}
%   \textbf{Sequence of Latin letters:}
%   \cmd{\seqoflatlet}\marg{A}\marg{B}
%   ... to do!
%    \begin{macrocode}
\newcommand{\seqoflatlet}[2]
  {\seqoflatlow{#1}{#2}\seqoflatupp{#1}{#2}}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
%%****************************************************************************%%
%    \end{macrocode}

% \begin{macro}{\seqofgrklow}
%   \textbf{Sequence of Greek lowercase letters:}
%   \cmd{\seqofgrklow}\marg{A}\marg{B}
%   ... to do!
%    \begin{macrocode}
\newcommand{\seqofgrklow}
  {\seqofcmd{alpha,beta,gamma,delta,epsilon,varepsilon,zeta,eta,theta,vartheta,%
  iota,kappa,varkappa,lambda,mu,nu,xi,omicron,pi,varpi,rho,varrho,sigma,%
  varsigma,tau,upsilon,phi,varphi,chi,psi,omega}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\seqofgrkupp}
%   \textbf{Sequence of Greek uppercase letters:}
%   \cmd{\seqofgrkupp}\marg{A}\marg{B}
%   ... to do!
%    \begin{macrocode}
\newcommand{\seqofgrkupp}
  {\seqofcmd{Alpha,Beta,Gamma,Delta,Epsilon,varEpsilon,Zeta,Eta,Theta,varTheta,%
  Iota,Kappa,varKappa,Lambda,Mu,Nu,Xi,Omicron,Pi,varPi,Rho,varRho,Sigma,%
  varSigma,Tau,Upsilon,Phi,varPhi,Chi,Psi,Omega}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\seqofgrklet}
%   \textbf{Sequence of Greek letters:}
%   \cmd{\seqofgrklet}\marg{A}\marg{B}
%   ... to do!
%    \begin{macrocode}
\newcommand{\seqofgrklet}[2]
  {\seqofgrklow{#1}{#2}\seqofgrkupp{#1}{#2}}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
%%****************************************************************************%%
%    \end{macrocode}

% \begin{macro}{\seqoflow}
%   \textbf{Sequence of lowercase letters:}
%   \cmd{\seqoflow}\marg{A}\marg{B}
%   ... to do!
%    \begin{macrocode}
\newcommand{\seqoflow}[2]
  {\seqoflatlow{#1}{#2}\seqofgrklow{#1}{#2}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\seqofupp}
%   \textbf{Sequence of uppercase letters:}
%   \cmd{\seqofupp}\marg{A}\marg{B}
%   ... to do!
%    \begin{macrocode}
\newcommand{\seqofupp}[2]
  {\seqoflatupp{#1}{#2}\seqofgrkupp{#1}{#2}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\seqoflet}
%   \textbf{Sequence of all letters:}
%   \cmd{\seqoflet}\marg{A}\marg{B}
%   ... to do!
%    \begin{macrocode}
\newcommand{\seqoflet}[2]
  {\seqoflow{#1}{#2}\seqofupp{#1}{#2}}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
%%****************************************************************************%%
%    \end{macrocode}

\endinput
